package com.casic.${client}.tags;

import com.casic.sso.common.utils.PermissionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.thymeleaf.context.ITemplateContext;
import org.thymeleaf.engine.AttributeName;
import org.thymeleaf.model.IProcessableElementTag;
import org.thymeleaf.processor.element.AbstractAttributeTagProcessor;
import org.thymeleaf.processor.element.IElementTagStructureHandler;
import org.thymeleaf.templatemode.TemplateMode;


/**
 * 自定义按钮权限控制
 * @author yuzengwen
 **/
public class CasicBtnTagProcessor extends AbstractAttributeTagProcessor {

    private Logger logger = LoggerFactory.getLogger(CasicBtnTagProcessor.class);

    private static final String ATTR_NAME = "hasPermission";
    private String clientId;
    private static final int PRECEDENCE = 10000;

    public CasicBtnTagProcessor(final String dialectPrefix,String clientId) {
        super(
                TemplateMode.HTML, // This processor will apply only to HTML mode
                dialectPrefix,     // Prefix to be applied to name for matching
                null,              // No tag name: match any tag name
                false,             // No prefix to be applied to tag name
                ATTR_NAME,         // Name of the attribute that will be matched
                true,              // Apply dialect prefix to attribute name
                PRECEDENCE,        // Precedence (inside dialect's own precedence)
                true);             // Remove the matched attribute afterwards
        this.clientId = clientId;
    }

    @Override
    protected void doProcess( final ITemplateContext context, final IProcessableElementTag tag,
                              final AttributeName attributeName, final String attributeValue,
                              final IElementTagStructureHandler structureHandler) {
        logger.info("clientId : "+clientId);
        logger.info("attributeValue : "+attributeValue);
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        boolean hasPermission = PermissionUtils.hasPermission(authentication,attributeValue, clientId);
        if(!hasPermission){
            structureHandler.setAttribute("style","display:none");
        }
    }

}
