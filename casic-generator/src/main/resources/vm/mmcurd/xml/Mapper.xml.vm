<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${package}.mapper.${moduleName}.${className}Mapper">
    
    <resultMap type="${className}" id="${className}Result">
        <id property="${primaryKey.attrname}" column="${primaryKey.columnName}"/>  
    #foreach ($column in $columns)
    
        <result property="${column.attrname}"    column="${column.columnName}"    />
    #end
    #foreach ($childTable in $childTableList)
    
        <collection property="${childTable.classname}List" ofType="${childTable.className}" column="${primaryKey.columnName}" select="get${childTable.className}List"></collection>
    #end
        
    </resultMap>
    
    #foreach ($childTable in $childTableList)
    <select id="get${childTable.className}List" parameterType="${primaryKey.attrType}" resultType="${childTable.className}">
        select ${childTable.primaryKey.columnName},
        #foreach($column in $childTable.columns)
        
               $column.columnName #if($velocityCount != $childTable.columns.size()),#end 
        #end
        
        from ${childTable.tableName}
        where ${primaryKey.columnName} = #{${primaryKey.attrname}}
    </select>
    #end
	
	<sql id="select${className}Vo">
        select ${primaryKey.columnName},
        #foreach($column in $columns) 
        
               $column.columnName#if($velocityCount != $columns.size()),#end
        #end 
        
        from ${tableName}
    </sql>

    
    <select id="select${className}List" parameterType="${className}" resultMap="${className}Result">
        <include refid="select${className}Vo"/>
        <where>  
        #foreach($column in $columns)
        
            <if test="$column.attrname != null #if($column.attrType == 'String' ) and $column.attrname.trim() != '' #end"> 
                and $column.columnName = #{$column.attrname}
            </if>
        #end
 
        </where>
    </select>
    
    <select id="select${className}ById" parameterType="${primaryKey.attrType}" resultMap="${className}Result">
        <include refid="select${className}Vo"/>
        where ${primaryKey.columnName} = #{${primaryKey.attrname}}
    </select>
        
    <insert id="insert${className}" parameterType="${className}">
        insert into ${tableName}
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="$primaryKey.attrname != null #if($primaryKey.attrType == 'String' ) and $primaryKey.attrname != '' #end ">
                $primaryKey.columnName,
            </if>
        #foreach($column in $columns)
    
            <if test="$column.attrname != null #if($column.attrType == 'String' ) and $column.attrname != '' #end ">
                $column.columnName,
            </if>
        #end
         </trim>
         <trim prefix="values (" suffix=")" suffixOverrides=",">
        
            <if test="$primaryKey.attrname != null #if($primaryKey.attrType == 'String' ) and $primaryKey.attrname != '' #end ">
                #{$primaryKey.attrname},
            </if>
        #foreach($column in $columns)
        
            <if test="$column.attrname != null #if($column.attrType == 'String' ) and $column.attrname != '' #end ">
                #{$column.attrname},
            </if>
        #end        
            
         </trim>
    </insert>
     
    <update id="update${className}" parameterType="${className}">
        update ${tableName}
        <trim prefix="SET" suffixOverrides=",">
        #foreach($column in $columns)
        
            <if test="$column.attrname != null #if($column.attrType == 'String' ) and $column.attrname != '' #end ">
                $column.columnName = #{$column.attrname},
            </if>
        #end
        
        </trim>
        where ${primaryKey.columnName} = #{${primaryKey.attrname}}
    </update>

    <delete id="delete${className}ById" parameterType="${primaryKey.attrType}">
        delete from ${tableName} where ${primaryKey.columnName} = #{${primaryKey.attrname}}
    </delete>
    
    <delete id="delete${className}ByIds" parameterType="String">
        delete from ${tableName} where ${primaryKey.columnName} in 
        <foreach item="${primaryKey.attrname}" collection="array" open="(" separator="," close=")">
            #{${primaryKey.attrname}}
        </foreach>
    </delete>
</mapper>